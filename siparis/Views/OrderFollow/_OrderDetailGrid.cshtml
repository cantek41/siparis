@{
    bool masterOnayla = false;
    bool masterEdit = false;
    bool masterDelete = false;
    string[] rol = Roles.GetRolesForUser();
    switch (rol[0])
    {
        case "Admin":
            masterOnayla = true;
            masterEdit = true;
            masterDelete = true;
            break;
        case "Bayi":
            if ((int)TempData["DOCUMENT_TYPE"] == 15 || (int)TempData["DOCUMENT_TYPE"] == 19)
            {
                masterOnayla = true;
                masterDelete = true;
            }
            break;
        case "Depo":
            break;
        default:
            break;
    }
}
@Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = "detailGrid_" + ViewData["OPPORTUNITY_CODE"];
        settings.SettingsDetail.MasterGridName = "grid";
        settings.CallbackRouteValues = new { Controller = "OrderFollow", Action = "OrderDetailGrid", CustomerID = ViewData["OPPORTUNITY_CODE"] };


        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsPager.EnableAdaptivity = true;
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.SettingsCommandButton.DeleteButton.Text = "dfdf";
       // settings.SettingsCommandButton.DeleteButton.Styles
      //  settings.CustomActionRouteValues = new { Controller = "OrderFollow", Action = "orderPartial" };
        settings.CommandColumn.CustomButtons.Add(new GridViewCommandColumnCustomButton()
        {
            ID = "First10",
            Text = "Sec"
        });
        //        settings.ClientSideEvents.CustomButtonClick = "function(s,e){detailGrid_" + ViewData["OPPORTUNITY_CODE"]+".PerformCallback({clickedButton : s.GetRowKey(e.visibleIndex)});}";
        settings.ClientSideEvents.CustomButtonClick = "function(s,e){{OnGetRowValues(s.GetRowKey(e.visibleIndex))}}";

        settings.CommandColumn.Visible = true;

       

        settings.KeyFieldName = "ROW_ORDER_NO;OPPORTUNITY_CODE";
        settings.Columns.Add(column =>
        {
            column.FieldName = "Picture";
            column.Name = "Picture";
            column.Caption = "Picture";
            column.Width = 120;
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write("<img src=\"" + DataBinder.Eval(c.DataItem, "Picture") + "\"/>");

            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ROW_ORDER_NO";
            column.Name = "ROW_ORDER_NO";
            column.Caption = "ROW_ORDER_NO";
            column.Width = 100;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "PRODUCT_NAME";
            column.Name = "ROW_ORDER_NO";
            column.Caption = "PRODUCT_NAME";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "QUANTITY";
            column.Name = "QUANTITY";
            column.Caption = "QUANTITY";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "UNIT_PRICE";
            column.Name = "UNIT_PRICE";
            column.Caption = "UNIT_PRICE";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "TOTAL";
            column.Name = "TOTAL";
            column.Caption = "TOTAL";
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "CUR_TYPE";
            column.Name = "CUR_TYPE";
            column.Caption = "CUR_TYPE";
        });

    }).Bind(Model).GetHtml()