@model Tuple<List<siparis.Models.StokWareHouseViewModel>, siparis.Models.OPPORTUNITYDETAIL>
<style type="text/css">
    /*body {
        padding: 0;
        margin: 0;
        overflow: hidden;
        min-height: 440px;
        min-width: 300px;
    }

    .title {
        float: left;
        padding: 1px 4px 1px;
        font-size: 2.2em;
    }

    .main-menu {
        float: right !important;
        margin: 8px 0 4px;
    }

    .grid,
    .grid .dxgvHSDC,
    .grid .dxgvCSD {
        border-left: 0 !important;
        border-right: 0 !important;
        border-bottom: 0 !important;
    }*/

    .detailPanel {
        height: 148px;
        padding: 12px;
        box-sizing: border-box;
    }

        .detailPanel.bar {
            height: auto !important;
        }

            .detailPanel.bar.expanded {
                border-top-width: 0 !important;
            }

    .editorContainer {
        width: 80%;
        margin-right: 1%;
        margin-bottom: 8px;
        /*float: left;*/
        min-width: 30px;
    }

    .editor {
        width: 100% !important;
    }

    .editorCaption {
        width: 104px;
    }
</style>
<div class="row">
    <div class="col-md-4">
        @Html.DevExpress().TextBoxFor(model => model.Item2.STOK_CODE, textBoxSettings =>
            {
                textBoxSettings.Properties.Caption = "STOK CODE";
                PrepareTextBoxSettings(textBoxSettings);
            }).GetHtml()

        @Html.DevExpress().TextBoxFor(model => model.Item2.PRODUCT_NAME, textBoxSettings =>
            {
                textBoxSettings.Properties.Caption = "PRODUCT NAME";
                PrepareTextBoxSettings(textBoxSettings);
            }).GetHtml()

        @Html.DevExpress().TextBoxFor(model => model.Item2.QUANTITY, textBoxSettings =>
            {
                textBoxSettings.Properties.Caption = "QUANTITY";
                PrepareTextBoxSettings(textBoxSettings);
            }).GetHtml()


        @functions{
            Action<TextBoxSettings> PrepareTextBoxSettings = (TextBoxSettings settings) =>
            {
                settings.ControlStyle.CssClass = "editor";
                settings.Properties.RootStyle.CssClass = "editorContainer";
                settings.Properties.CaptionCellStyle.CssClass = "editorCaption";
                settings.ReadOnly = true;

            };
        }

    </div>

    <div class="col-md-8">
        <h5><B>DISTRIBUTE</B></h5>
        @Html.DevExpress().GridView(settings =>
    {
        settings.Name = "gvOverview";
        settings.CallbackRouteValues = new
        {
            Controller = "OrderFollow",
            Action = "orderPartial"
        };
        settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "WareHouse", Action = "updateWareHouse" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
        //   settings.SettingsEditing.BatchEditSettings.EditMode = GridViewEditingMode.Batch;
        //  settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewEditingMode.BatchStartEditAction;

        settings.KeyFieldName = "WAREHOUSE_NAME";
        settings.Columns.Add(column =>
        {
            column.FieldName = "WAREHOUSE_NAME";
            column.ReadOnly = true;

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "TOTAL_QUANTITIY";
            column.ReadOnly = true;

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "QUANTITY";
            column.ReadOnly = true;

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "CHOSE";
            column.Caption = "CHOSE";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
            spinEditProperties.NumberType = SpinEditNumberType.Integer;
            spinEditProperties.MinValue = 0;
            spinEditProperties.MaxValue = 10000;

        });
    }).Bind(Model.Item1).GetHtml()
    </div>
</div>
